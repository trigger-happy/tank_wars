cmake_minimum_required(VERSION 2.6)

set(CMAKE_USER_MAKE_RULES_OVERRIDE "${CMAKE_CURRENT_SOURCE_DIR}/c_flag_overrides.cmake")
set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX "${CMAKE_CURRENT_SOURCE_DIR}/cxx_flag_overrides.cmake")

project("Tank Wars")

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	set(BOOST_LIBRARYDIR /usr/local/lib)
	set(BOOST_INCLUDEDIR /usr/local/include)
	FIND_PACKAGE(X11 REQUIRED)
	list(APPEND LINK_LIBS ${LINK_LIBS} fontconfig)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	set(CMAKE_LIBRARY_PATH "C:\\Boost\\lib")
	set(CMAKE_INCLUDE_PATH "C:\\Boost\\include")
	set(CMAKE_FIND_LIBRARY_PREFIXES "lib" "")
endif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules)

SET(Boost_USE_MULTITHREAD ON)
SET(Boost_USE_STATIC_LIBS ON)
SET(Boost_ADDITIONAL_VERSIONS "1.44.0")
FIND_PACKAGE(Boost 1.44.0 COMPONENTS program_options system thread REQUIRED)
FIND_PACKAGE(ZLIB REQUIRED)
FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(JPEG REQUIRED)
FIND_PACKAGE(Freetype REQUIRED)
FIND_PACKAGE(ClanLib REQUIRED)
FIND_PACKAGE(CUDA)
FIND_PACKAGE(Threads REQUIRED)

SET(CUDA_NVCC_FLAGS -arch sm_11)
SET(CUDA_NVCC_FLAGS_DEBUG --ptxas-options=-v)

set(CMAKE_CXX_FLAGS_MAINTAINER "-I/usr/local/cuda/include -O0 -g")
set(CMAKE_C_FLAGS_MAINTAINER ${CMAKE_CXX_FLAGS_MAINTAINER})
set(CMAKE_EXE_LINKER_FLAGS_MAINTAINER "")
set(CMAKE_SHARED_LINKER_FLAGS_MAINTAINER "")
#SET(CUDA_NVCC_FLAGS_MAINTAINER -O0;-g;-G;--compiler-bindir /opt/bin)
SET(CUDA_NVCC_FLAGS_MAINTAINER -O0;-g;-G;--compiler-bindir /home/trigger/bin)
MARK_AS_ADVANCED(
		CMAKE_CXX_FLAGS_MAINTAINER
		CMAKE_C_FLAGS_MAINTAINER
		CMAKE_EXE_LINKER_FLAGS_MAINTAINER
		CMAKE_SHARED_LINKER_FLAGS_MAINTAINER
		CUDA_NVCC_FLAGS_MAINTAINER)

include_directories("${PROJECT_SOURCE_DIR}/include"
			${Boost_INCLUDE_DIRS}
			${ClanLib_INCLUDE_DIRS}
			${ZLIB_INCLUDE_DIR}
			${PNG_INCLUDE_DIR}
			${JPEG_INCLUDE_DIR}
			${FREETYPE_INCLUDE_DIRS}
			${X11_INCLUDE_DIR})
					
link_directories(${Boost_LIBRARY_DIRS})

#uncomment clanlib later
list(APPEND LINK_LIBS ${LINK_LIBS}
			kyotocabinet
			${CMAKE_THREAD_LIBS_INIT}
			${OPENGL_LIBRARIES}
			${Boost_LIBRARIES}
			${ClanLib_LIBRARIES}
			${ZLIB_LIBRARIES}
			${PNG_LIBRARIES}
			${JPEG_LIBRARIES}
			${FREETYPE_LIBRARIES}
			${X11_LIBRARIES})

link_libraries(${LINK_LIBS})

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR})

add_subdirectory(src)
